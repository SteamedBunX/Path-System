//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""52e3a0a9-2376-46ef-bc00-fded78d16a5e"",
            ""actions"": [
                {
                    ""name"": ""JumpInput"",
                    ""type"": ""Button"",
                    ""id"": ""fd3fccbd-9c58-4a9f-b406-92544aa7ebde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""c191aefd-b910-47e6-ace0-12151a1fb3cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""632e9b60-21b5-48c6-a44a-cff00d64e1f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""2a8d87ff-302a-45b4-babe-b08a7b7e75da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db28c1c3-735c-48f3-9a8a-cced7a999604"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba872109-e519-47b9-ad8a-d05d1f032bcb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fdc372a-4d06-455a-a1a2-8bfb45a9fe3b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""564b2ba6-fcb8-474f-84ae-69c19c72bbdf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_JumpInput = m_Combat.FindAction("JumpInput", throwIfNotFound: true);
        m_Combat_Left = m_Combat.FindAction("Left", throwIfNotFound: true);
        m_Combat_Right = m_Combat.FindAction("Right", throwIfNotFound: true);
        m_Combat_Down = m_Combat.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_JumpInput;
    private readonly InputAction m_Combat_Left;
    private readonly InputAction m_Combat_Right;
    private readonly InputAction m_Combat_Down;
    public struct CombatActions
    {
        private @PlayerInput m_Wrapper;
        public CombatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @JumpInput => m_Wrapper.m_Combat_JumpInput;
        public InputAction @Left => m_Wrapper.m_Combat_Left;
        public InputAction @Right => m_Wrapper.m_Combat_Right;
        public InputAction @Down => m_Wrapper.m_Combat_Down;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @JumpInput.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnJumpInput;
                @JumpInput.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnJumpInput;
                @JumpInput.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnJumpInput;
                @Left.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnRight;
                @Down.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @JumpInput.started += instance.OnJumpInput;
                @JumpInput.performed += instance.OnJumpInput;
                @JumpInput.canceled += instance.OnJumpInput;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    public interface ICombatActions
    {
        void OnJumpInput(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
